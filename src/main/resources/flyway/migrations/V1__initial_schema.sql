-- Flyway Migration Script: V1__initial_schema.sql

CREATE TABLE contato
(
    id       NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    telefone VARCHAR2(255) NOT NULL,
    email    VARCHAR2(255) NOT NULL
);

CREATE TABLE energia
(
    id         INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    nome       VARCHAR2(255) NOT NULL,
    tipo       VARCHAR2(255),
    descricao  VARCHAR2(255),
    unidade    VARCHAR2(255),

    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE comunidade
(
    id         INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    nome       VARCHAR2(255) NOT NULL,
    descricao  VARCHAR2(255),
    latitude   NUMBER,
    longitude  NUMBER,
    populacao  NUMBER,

    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE usuario
(
    id         INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    nome       VARCHAR2(255) NOT NULL,
    email      VARCHAR2(255) UNIQUE NOT NULL,
    senha      VARCHAR2(255) NOT NULL,

    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE fornecedor
(
    id         INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    nome       VARCHAR2(255) NOT NULL,
    descricao  VARCHAR2(255) NOT NULL,
    endereco   VARCHAR2(255) NOT NULL,
    cnpj       VARCHAR2(255) UNIQUE NOT NULL,
    id_contato INTEGER NOT NULL,

    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    FOREIGN KEY (id_contato) REFERENCES usuario (id)

);

CREATE TABLE polo_fornecedor
(
    id            INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    nome          VARCHAR2(255) NOT NULL,
    endereco      VARCHAR2(255) NOT NULL,
    latitude      NUMBER,
    longitude     NUMBER,
    id_fornecedor INTEGER NOT NULL,

    created_at    TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at    TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    FOREIGN KEY (id_fornecedor) REFERENCES fornecedor (id)
);

-- Triggers

CREATE
OR REPLACE TRIGGER energia_before_update
BEFORE
UPDATE ON energia
    FOR EACH ROW
BEGIN
    :NEW
.updated_at := CURRENT_TIMESTAMP;
END;
/

CREATE
OR REPLACE TRIGGER comunidade_before_update
BEFORE
UPDATE ON comunidade
    FOR EACH ROW
BEGIN
    :NEW
.updated_at := CURRENT_TIMESTAMP;
END;
/

CREATE
OR REPLACE TRIGGER usuario_before_update
BEFORE
UPDATE ON usuario
    FOR EACH ROW
BEGIN
    :NEW
.updated_at := CURRENT_TIMESTAMP;
END;
/

CREATE
OR REPLACE TRIGGER fornecedor_before_update
BEFORE
UPDATE ON fornecedor
    FOR EACH ROW
BEGIN
    :NEW
.updated_at := CURRENT_TIMESTAMP;
END;
/

CREATE
OR REPLACE TRIGGER polo_fornecedor_before_update
BEFORE
UPDATE ON polo_fornecedor
    FOR EACH ROW
BEGIN
    :NEW
.updated_at := CURRENT_TIMESTAMP;
END;
/

CREATE
OR REPLACE FUNCTION encrypt_senha(p_senha IN VARCHAR2) RETURN RAW IS
    l_key RAW(32) := UTL_RAW.cast_to_raw('0123456789ABCDEF0123456789ABCDEF'); -- 32-byte key
    l_encrypted
RAW(2000);
BEGIN
    l_encrypted
:= DBMS_CRYPTO.encrypt(
        src => UTL_RAW.cast_to_raw(p_senha),
        typ => DBMS_CRYPTO.DES_CBC_PKCS5,
        key => l_key
    );
RETURN l_encrypted;
END;
/

CREATE
OR REPLACE FUNCTION decrypt_senha(p_encrypted IN RAW) RETURN VARCHAR2 IS
    l_key RAW(32) := UTL_RAW.cast_to_raw('0123456789ABCDEF0123456789ABCDEF'); -- 32-byte key
    l_decrypted
RAW(2000);
BEGIN
    l_decrypted
:= DBMS_CRYPTO.decrypt(
        src => p_encrypted,
        typ => DBMS_CRYPTO.DES_CBC_PKCS5,
        key => l_key
    );
RETURN UTL_RAW.cast_to_varchar2(l_decrypted);
END;
/

-- Trigger to encrypt senha on INSERT
CREATE
OR REPLACE TRIGGER usuario_before_insert
BEFORE INSERT ON usuario
FOR EACH ROW
BEGIN
    :NEW
.senha := encrypt_senha(:NEW.senha);
END;
/

-- Trigger to encrypt senha on UPDATE
CREATE
OR REPLACE TRIGGER usuario_before_update
BEFORE
UPDATE ON usuario
    FOR EACH ROW
BEGIN
    :NEW
.senha := encrypt_senha(:NEW.senha);
END;
/

-- Function to decrypt senha on SELECT
CREATE
OR REPLACE FUNCTION get_usuario_senha(p_id IN NUMBER) RETURN VARCHAR2 IS
    l_senha VARCHAR2(255);
BEGIN
SELECT decrypt_senha(senha)
INTO l_senha
FROM usuario
WHERE id = p_id;
RETURN l_senha;
END;
/